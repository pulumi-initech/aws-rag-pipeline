name: AWS RAG Pipeline CI/CD

on:
  pull_request:
    branches: [main]
    paths-ignore:
      - '*.md'
      - 'docs/**'
  push:
    branches: [main]
    paths-ignore:
      - '*.md'
      - 'docs/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  NODE_VERSION: 23
  PULUMI_ORGANIZATION: initech
  # OIDC authentication replaces PULUMI_ACCESS_TOKEN
  # AWS credentials will be injected via ESC

jobs:
  # =============================================================================
  # QUALITY CHECKS - Always run first
  # =============================================================================
  quality_checks:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          version: 10
          run_install: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version:  ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run ESLint
        run: pnpm run lint:check

      - name: Run TypeScript compilation check
        run: pnpm run build

      - name: Run security audit
        run: pnpm audit --audit-level moderate

      # - name: Check for secrets in code
      #   uses: trufflesecurity/trufflehog@main
      #   with:
      #     path: ./
      #     base: main
      #     head: HEAD
      #     extra_args: --debug --only-verified

  # =============================================================================
  # UNIT TESTS - Fast feedback loop
  # =============================================================================
  unit_tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: quality_checks
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          version: 10
          run_install: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version:  ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run unit tests
        run: pnpm run test:unit


  # =============================================================================
  # INTEGRATION TESTS - PR Environment
  # =============================================================================
  integration_tests_pr:
    name: Integration Tests (PR)
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: [quality_checks, unit_tests]
    environment: pr-testing
    concurrency:
      group: pr-${{ github.event.number }}
      cancel-in-progress: true
    permissions:
      id-token: write
      contents: read
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          version: 10
          run_install: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version:  ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Authenticate with Pulumi
        uses: pulumi/auth-actions@v1
        with:
          organization: ${{ env.PULUMI_ORGANIZATION }}
          requested-token-type: urn:pulumi:token-type:access_token:organization

      - name: Setup ESC and inject credentials
        uses: pulumi/esc-action@v1
        with:
          environment: ${{ env.PULUMI_ORGANIZATION }}/aws-rag-pipeline/pr

      - name: Create PR stack configuration
        run: |
          cat > Pulumi.pr-${{ github.event.number }}.yaml << EOF
          environment: 
            - aws-rag-pipeline/pr
          config:
            aws-rag-pipeline:collectionName: rag-pr-${{ github.event.number }}
          EOF

      - name: Deploy ephemeral stack
        uses: pulumi/actions@v5
        with:
          command: up
          stack-name: pr-${{ github.event.number }}
          upsert: true
          comment-on-pr: true
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Wait for infrastructure to stabilize
        run: sleep 30

      - name: Run integration tests
        run: pnpm run test:integration
        timeout-minutes: 15
        env:
          PULUMI_STACK_NAME: pr-${{ github.event.number }}

      - name: Destroy ephemeral stack
        if: always()
        uses: pulumi/actions@v5
        with:
          command: destroy
          stack-name: pr-${{ github.event.number }}
          comment-on-pr: true
          github-token: ${{ secrets.GITHUB_TOKEN }}

  # =============================================================================
  # STAGING DEPLOYMENT - Main branch pushes
  # =============================================================================
  deploy_staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [quality_checks, unit_tests]
    environment: 
      name: staging
      url: https://staging.example.com
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          version: 10
          run_install: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version:  ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Authenticate with Pulumi
        uses: pulumi/auth-actions@v1
        with:
          organization: ${{ env.PULUMI_ORGANIZATION }}
          requested-token-type: urn:pulumi:token-type:access_token:organization

      - name: Setup ESC and inject credentials
        uses: pulumi/esc-action@v1
        with:
          environment: ${{ env.PULUMI_ORGANIZATION }}/aws-rag-pipeline-staging

      - name: Deploy to staging
        uses: pulumi/actions@v5
        with:
          command: up
          stack-name: staging
          comment-on-pr: false

      - name: Health check staging deployment
        run: |
          echo "Performing health checks on staging environment..."
          sleep 10
          # Add custom health check commands here

  # =============================================================================
  # END-TO-END TESTS - Staging environment
  # =============================================================================
  e2e_tests_staging:
    name: E2E Tests (Staging)
    runs-on: ubuntu-latest
    needs: deploy_staging
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          version: 10
          run_install: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version:  ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup ESC (Environment, Secrets, and Configuration)
        uses: pulumi/esc-action@v1
        with:
          version: latest

      - name: Run E2E tests against staging
        run: esc run aws-rag-pipeline/staging -i pnpm run test:e2e
        timeout-minutes: 20
        env:
          PULUMI_CONFIG_PASSPHRASE: ${{ secrets.PULUMI_CONFIG_PASSPHRASE }}

      - name: Upload E2E test artifacts
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: e2e-test-results
          path: |
            test-results/
            logs/
          retention-days: 7

  # =============================================================================
  # PRODUCTION DEPLOYMENT - Manual approval required
  # =============================================================================
  deploy_production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: e2e_tests_staging
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: 
      name: production
      url: https://production.example.com
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          version: 10
          run_install: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version:  ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Authenticate with Pulumi
        uses: pulumi/auth-actions@v1
        with:
          organization: ${{ env.PULUMI_ORGANIZATION }}
          requested-token-type: urn:pulumi:token-type:access_token:organization

      - name: Setup ESC and inject credentials
        uses: pulumi/esc-action@v1
        with:
          environment: ${{ env.PULUMI_ORGANIZATION }}/aws-rag-pipeline-production

      - name: Deploy to production
        uses: pulumi/actions@v5
        with:
          command: up
          stack-name: production

      # - name: Health check production deployment
      #   run: |
      #     echo "Performing health checks on production environment..."
      #     sleep 15
      #     # Add custom health check commands here

      # - name: Notify deployment success
      #   if: success()
      #   uses: 8398a7/action-slack@v3
      #   with:
      #     status: success
      #     text: '🚀 AWS RAG Pipeline successfully deployed to production!'
      #   env:
      #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      # - name: Notify deployment failure
      #   if: failure()
      #   uses: 8398a7/action-slack@v3
      #   with:
      #     status: failure
      #     text: '❌ AWS RAG Pipeline production deployment failed!'
      #   env:
      #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # =============================================================================
  # MANUAL WORKFLOW DISPATCH
  # =============================================================================
  manual_deployment:
    name: Manual Deployment
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    environment: ${{ github.event.inputs.environment }}
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          version: 10
          run_install: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version:  ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Authenticate with Pulumi
        uses: pulumi/auth-actions@v1
        with:
          organization: ${{ env.PULUMI_ORGANIZATION }}
          requested-token-type: urn:pulumi:token-type:access_token:organization

      - name: Deploy to ${{ github.event.inputs.environment }}
        uses: pulumi/actions@v5
        with:
          command: up
          stack-name: ${{ github.event.inputs.environment }}