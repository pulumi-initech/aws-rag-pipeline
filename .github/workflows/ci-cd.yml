name: AWS RAG Pipeline CI/CD

on:
  pull_request:
    branches: [main]
    paths-ignore:
      - '*.md'
      - 'docs/**'
  push:
    branches: [main]
    paths-ignore:
      - '*.md'
      - 'docs/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  NODE_VERSION: 18
  PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  PINECONE_API_KEY: ${{ secrets.PINECONE_API_KEY }}

jobs:
  # =============================================================================
  # QUALITY CHECKS - Always run first
  # =============================================================================
  quality_checks:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run ESLint
        run: pnpm run lint:check

      - name: Run TypeScript compilation check
        run: pnpm run build

      - name: Run security audit
        run: pnpm audit --audit-level moderate

      - name: Check for secrets in code
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  # =============================================================================
  # UNIT TESTS - Fast feedback loop
  # =============================================================================
  unit_tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: quality_checks
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run unit tests with coverage
        run: pnpm run test:coverage

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          fail_ci_if_error: false

  # =============================================================================
  # INTEGRATION TESTS - PR Environment
  # =============================================================================
  integration_tests_pr:
    name: Integration Tests (PR)
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: [quality_checks, unit_tests]
    environment: pr-testing
    concurrency:
      group: pr-${{ github.event.number }}
      cancel-in-progress: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup Pulumi
        uses: pulumi/actions@v4

      - name: Deploy ephemeral stack
        uses: pulumi/actions@v4
        with:
          command: up
          stack-name: pr-${{ github.event.number }}
          upsert: true
          comment-on-pr: true
          github-token: ${{ secrets.GITHUB_TOKEN }}
        env:
          PULUMI_CONFIG_PASSPHRASE: ${{ secrets.PULUMI_CONFIG_PASSPHRASE }}

      - name: Wait for infrastructure to stabilize
        run: sleep 30

      - name: Run integration tests
        run: pnpm run test:integration
        timeout-minutes: 15
        env:
          PULUMI_STACK_NAME: pr-${{ github.event.number }}

      - name: Destroy ephemeral stack
        if: always()
        uses: pulumi/actions@v4
        with:
          command: destroy
          stack-name: pr-${{ github.event.number }}
          comment-on-pr: true
          github-token: ${{ secrets.GITHUB_TOKEN }}
        env:
          PULUMI_CONFIG_PASSPHRASE: ${{ secrets.PULUMI_CONFIG_PASSPHRASE }}

  # =============================================================================
  # STAGING DEPLOYMENT - Main branch pushes
  # =============================================================================
  deploy_staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [quality_checks, unit_tests]
    environment: 
      name: staging
      url: https://staging.example.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup Pulumi
        uses: pulumi/actions@v4

      - name: Deploy to staging
        uses: pulumi/actions@v4
        with:
          command: up
          stack-name: staging
          comment-on-pr: false
        env:
          PULUMI_CONFIG_PASSPHRASE: ${{ secrets.PULUMI_CONFIG_PASSPHRASE }}

      - name: Health check staging deployment
        run: |
          echo "Performing health checks on staging environment..."
          sleep 10
          # Add custom health check commands here

  # =============================================================================
  # END-TO-END TESTS - Staging environment
  # =============================================================================
  e2e_tests_staging:
    name: E2E Tests (Staging)
    runs-on: ubuntu-latest
    needs: deploy_staging
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup ESC (Environment, Secrets, and Configuration)
        uses: pulumi/esc-action@v1
        with:
          version: latest

      - name: Run E2E tests against staging
        run: esc run aws-rag-pipeline/staging -i pnpm run test:e2e
        timeout-minutes: 20
        env:
          PULUMI_CONFIG_PASSPHRASE: ${{ secrets.PULUMI_CONFIG_PASSPHRASE }}

      - name: Upload E2E test artifacts
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: e2e-test-results
          path: |
            test-results/
            logs/
          retention-days: 7

  # =============================================================================
  # PRODUCTION DEPLOYMENT - Manual approval required
  # =============================================================================
  deploy_production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: e2e_tests_staging
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: 
      name: production
      url: https://production.example.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup Pulumi
        uses: pulumi/actions@v4

      - name: Deploy to production
        uses: pulumi/actions@v4
        with:
          command: up
          stack-name: production
        env:
          PULUMI_CONFIG_PASSPHRASE: ${{ secrets.PULUMI_CONFIG_PASSPHRASE }}

      - name: Health check production deployment
        run: |
          echo "Performing health checks on production environment..."
          sleep 15
          # Add custom health check commands here

      - name: Notify deployment success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: 'üöÄ AWS RAG Pipeline successfully deployed to production!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify deployment failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: '‚ùå AWS RAG Pipeline production deployment failed!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # =============================================================================
  # MANUAL WORKFLOW DISPATCH
  # =============================================================================
  manual_deployment:
    name: Manual Deployment
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    environment: ${{ github.event.inputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup Pulumi
        uses: pulumi/actions@v4

      - name: Deploy to ${{ github.event.inputs.environment }}
        uses: pulumi/actions@v4
        with:
          command: up
          stack-name: ${{ github.event.inputs.environment }}
        env:
          PULUMI_CONFIG_PASSPHRASE: ${{ secrets.PULUMI_CONFIG_PASSPHRASE }}

  # =============================================================================
  # CLEANUP JOB - Remove old PR stacks
  # =============================================================================
  cleanup:
    name: Cleanup Old PR Stacks
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Pulumi
        uses: pulumi/actions@v4

      - name: List and cleanup old PR stacks
        run: |
          echo "Listing all PR stacks..."
          pulumi stack ls --all | grep "^pr-" | while read -r stack; do
            echo "Found PR stack: $stack"
            # Add logic to check if PR is closed and delete stack
            # This would typically involve GitHub API calls
          done
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}